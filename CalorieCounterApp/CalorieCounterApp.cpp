#include "ActivitiesDeleter.h" 
#include "ActivitiesInput.h"
#include "DataBase.h" 
#include "ProductDeleter.h"
#include "ProductInput.h"
#include "UserDeleter.h" 
#include "UserEdit.h"
#include "UserInput.h"
#include <chrono>
#include <format> 
#include <iostream>
#include <limits>
#include <sstream>

void showMainMenu() { // Функция для отображения главного меню
	std::cout << "Калькулятор калорий\n";
	std::cout << "\n1 - Открыть меню управления пользователями\n";
	// Добавить функционал!!!
	std::cout << "2 - Рассчитать калории\n";
	std::cout << "3 - Открыть меню управления продуктами\n";
	std::cout << "4 - Открыть меню управления активностями\n";
	std::cout << "0 - Выход\n";
	std::cout << "Выбор: ";
}

void showConfigUserMenu() { // Функция для отображения меню управления пользователями
	std::cout << "Меню управления пользователями\n";
	// Исправить ошибку с считыванием таблицы users
	std::cout << "\n1 - Изменить данные пользователя\n";
	std::cout << "2 - Удалить пользователя\n";
	std::cout << "0 - Выход\n";
	std::cout << "Выбор: ";
}

void showCalorieCalculatorMenu() { // Функция для отображения меню расчета калорий
	std::cout << "Меню расчета калорий\n";
	// Добавить функционал!!!
	std::cout << "\n1 - Рассчитать калории для пользователя\n";
	std::cout << "2 - Показать информацию о пользователе\n";
	std::cout << "3 - Изменить информацию о пользователе\n";
	std::cout << "0 - Выход\n";
	std::cout << "Выбор: ";
}

void showProductMenu() { // Функция для отображения меню управления продуктами
	std::cout << "Меню управления продуктами\n";
	std::cout << "\n1 - Добавить продукт\n";
	std::cout << "2 - Показать все продукты\n";
	std::cout << "3 - Удалить продукт из базы\n";
	std::cout << "0 - Выход\n";
	std::cout << "Выбор: ";
}

void showActivitiesMenu() { // Функция для отображения меню управления активностями
	std::cout << "Меню управления активностями\n";
	std::cout << "\n1 - Добавить активность\n";
	std::cout << "2 - Посмотреть все активности\n";
	std::cout << "3 - Удалить активность из базы\n";
	std::cout << "0 - Выход\n";
	std::cout << "Выбор: ";
}

int main() { 
	setlocale(LC_ALL, "Russian");

	DataBase db("calories.db"); // Создаем объект базы данных с именем файла "calories.db"
	ProductDeleter productDeleter(db); // Создаем объект ProductDeleter
	ActivitiesDeleter activitiesDeleter(db); // Создаем объект ActivitiesDeleter
	UserDeleter userDeleter(db); // Создаем объект UserDeleter для удаления пользователей
	UserInput input; // Создаем объект UserInput для ввода пользователя
	UserEdit userEdit; // Создаем объект UserEdit для редактирования пользователя


	std::chrono::system_clock::time_point currentDate = std::chrono::system_clock::now(); // Текущая дата и время
	std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<int, std::ratio<86400>>> currentDay = std::chrono::time_point_cast<std::chrono::duration<int, std::ratio<86400>>>(currentDate); // Текущий день без времени

	std::string userName = ""; // Переменная для глобального хранения имени пользователя
	int userCalories = 0; // Переменная для глобального хранения калорий пользователя
	int userWeight = 0; // Переменная для глобального хранения веса пользователя
	std::string activityType = ""; // Переменная для глобального хранения типа активности пользователя
	std::string foodType = ""; // Переменная для глобального хранения типа питания пользователя

	int choiceMainMenu; // Переменная для выбора действия в меню
	do {

		do
		{
			// Таблицы создаем в теле цикла, чтобы не возникало ошибок при удалении таблиц
			if (!db.createTableProducts()) return 1; // Создаем таблицу продуктов
			if (!db.createTableActivities()) return 1; // Создаем таблицу активностей
			if (!db.createTableUsers()) return 1; // Создаем таблицу пользователей
			if (!db.createTableInfoUsers()) return 1; // Создаем таблицу информации о пользователях
			if (!db.createTableUserActivities()) return 1; // Создаем таблицу активностей пользователей
			if (!db.createTableUserProducts()) return 1; // Создаем таблицу продуктов пользователей

			int userId = 0; // Переменная для хранения ID, чтобы потом проверить, создан ли пользователь в базе данных
			userId = db.isUserExists(userId); // Проверяем, создан ли пользователь в базе данных
			// Проверка добавлен ли пользователь
			if (userId == 0) {
				std::cout << "Добавление пользователя\n";
				User user = input.inputUser(); // Считываем данные пользователя
				db.addUser(user); // Добавляем пользователя в базу данных
			}
			else if (userId > 1) {
				std::cout << "Добавлено несколько пользователей, нужно выбрать только одного!\n";
				std::cout << "Пожалуйста, выберите пользователя из списка, второй пользователь будет удален\n";
				// Добавить функционал для выбора пользователя из списка
			}
			else if (userId < 0) {
				std::cout << "Произошла ошибка при добавлении пользователя, попробуйте еще раз.\n";
				return 1; // Завершаем программу с ошибкой
			}


			showMainMenu(); // Отображаем главное меню
			std::cin >> choiceMainMenu; 
			if (std::cin.fail()) {  // Проверяем, не произошла ли ошибка при вводе
				std::cin.clear(); 
				std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
				std::cout << "Вы не ввели ничего или ввели иной символ. Пожалуйста, выберите вариант из меню.\n";
				continue; // Продолжаем цикл для повторного ввода
			}
			else
				break; // Выходим из цикла, если введено корректное значение
		} while (true);

		int choiceActivitiesMenu; // Переменная для выбора действия в меню активностей
		int choiceProductMenu; // Переменная для выбора действия в меню продуктов

		switch (choiceMainMenu) { // Преобразуем строку в целое число для обработки выбора пользователя
			case 1: {
				// Меню конфигурации пользователя
				int choiceConfigUserMenu;
				int choiceMenu = 1;

				do
				{
					do
					{
						showConfigUserMenu(); // Отображаем меню добавления пользователя
						std::cin >> choiceConfigUserMenu; 
						if (std::cin.fail()) {  // Проверяем, не произошла ли ошибка при вводе
							std::cin.clear(); 
							std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); 
							std::cout << "Вы не ввели ничего или ввели иной символ. Пожалуйста, выберите вариант из меню.\n";
							continue; // Продолжаем цикл для повторного ввода
						}
						else
							break; // Выходим из цикла, если введено корректное значение
					} while (true);

					switch (choiceConfigUserMenu) {
						case 1: {
							// Функция изменения пользователя
							userEdit.choiceEditUser();
							break;
						}
						case 2: {
							// Функция удаления пользователя
							userDeleter.runDeleteUI(choiceConfigUserMenu);
							break;
						}
						default: { // Если пользователь ввел неверный вариант
							if (choiceConfigUserMenu != 0) { // Если пользователь не выбрал выход из программы
								std::cout << "Неверный выбор. Пожалуйста, выберите вариант из меню.\n"; 
								choiceConfigUserMenu = -1; 
								continue; // Продолжаем цикл для повторного выбора действия
							}
							break;
						}
					}
				} while (choiceConfigUserMenu != 0); // Продолжаем цикл до тех пор, пока пользователь не выберет выход из программы
				break; // Выходим из цикла, если пользователь выбрал выход из программы
			}

			case 2: {
				// Меню расчета калорий
				int choiceCalorieCalculatorMenu = 0;
				do
				{
					do
					{
						showCalorieCalculatorMenu(); // Отображаем меню
						std::cin >> choiceCalorieCalculatorMenu; 
						if (std::cin.fail()) { 
							std::cin.clear();
							std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); 
							std::cout << "Вы не ввели ничего или ввели иной символ. Пожалуйста, выберите вариант из меню.\n";
							continue; // Продолжаем цикл для повторного ввода
						}
						else
							break; // Выходим из цикла, если введено корректное значение
					} while (true);

					switch (choiceCalorieCalculatorMenu) {
						case 1: { // Рассчитать калории для пользователя
							break;
						}
						case 2: { // Показать информацию о пользователе
							break;
						}
						case 3: { // Изменить информацию о пользователе
							break;
						}
						default: {
							if (choiceCalorieCalculatorMenu != 0) { // Если пользователь не выбрал выход из программы
								std::cout << "Неверный выбор. Пожалуйста, выберите вариант из меню.\n"; 
								choiceCalorieCalculatorMenu = -1;
								continue; // Продолжаем цикл для повторного выбора действия
							}
							break;
						} 
					}
				} while (choiceCalorieCalculatorMenu != 0); // Продолжаем цикл до тех пор, пока пользователь не выберет выход из программы
			}

			case 3: {
				// Меню управления продуктами
				do
				{
					do
					{
						showProductMenu(); // Отображаем меню
						std::cin >> choiceProductMenu; 
						if (std::cin.fail()) {  
							std::cin.clear();
							std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); 
							std::cout << "Вы не ввели ничего или ввели иной символ. Пожалуйста, выберите вариант из меню.\n";
							continue; // Продолжаем цикл для повторного ввода
						}
						else
							break; // Выходим из цикла, если введено корректное значение
					} while (true);

					switch (choiceProductMenu) {
						case 1: { // Добавление продукта
							ProductInput input;
							Product p = input.inputProduct(); // Считываем данные о продукте
							db.addProduct(p); // Добавляем продукт в базу данных
							break;
						}
						case 2: { // Показать все продукты
							auto list = db.getAllProducts(); // Получаем список всех продуктов из базы данных
							for (const auto& p : list) { // Перебираем все продукты в списке
								p.printProducts(); // Выводим информацию о каждом продукте
							}
							break;
						}
						case 3: { // Удаление продукта
							productDeleter.runDeleteUI(); // Запускаем интерфейс удаления продуктов
							break;
						}
						default: {
							if (choiceProductMenu != 0) { // Если пользователь не выбрал выход из программы
								std::cout << "Неверный выбор. Пожалуйста, выберите вариант из меню.\n"; 
								choiceProductMenu = -1; 
								continue; // Продолжаем цикл для повторного выбора действия
							}
							break; // Выходим из цикла, если пользователь выбрал выход из программы
						}
					}
				} while (choiceProductMenu != 0);
			}

			case 4: {
				// Меню управления активностями
				do
				{
					do
					{
						showActivitiesMenu(); // Отображаем меню
						std::cin >> choiceActivitiesMenu; 
						if (std::cin.fail()) {  
							std::cin.clear(); 
							std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
							std::cout << "Вы не ввели ничего или ввели иной символ. Пожалуйста, выберите вариант из меню.\n";
							continue; // Продолжаем цикл для повторного ввода
						}
						else
							break; // Выходим из цикла, если введено корректное значение
					} while (true);

					switch (choiceActivitiesMenu)
					{
						case 1: {
							// Добавление активности
							ActivitiesInput input; 
							Activities a = input.inputActivities(); // Считываем данные об активности
							db.addActivities(a); // Добавляем активность в базу данных
							break;
						}
						case 2: {
							// Показать все активности
							auto list = db.getAllActivities();
							for (const auto& a : list) { // Перебираем все активности в списке
								a.printActivities(); // Выводим информацию о каждой активности
							}
							break;
						}
						case 3: {
							// Удаление активности
							activitiesDeleter.runDeleteUI(); // Запускаем пользовательский интерфейс удаления активностей
							break;
						}
						default: {
							if (choiceActivitiesMenu != 0) { // Если пользователь не выбрал выход из программы
								std::cout << "Неверный выбор. Пожалуйста, выберите вариант из меню.\n"; 
								choiceActivitiesMenu = -1;
								continue; // Продолжаем цикл для повторного выбора действия
							}
							break; // Выходим из цикла, если пользователь выбрал выход из программы
						}
					}
				} while (choiceActivitiesMenu != 0);
				break;
			}

			default: {// Если пользователь ввел неверный вариант
				if (choiceMainMenu != 0) {
					std::cout << "Неверный выбор. Пожалуйста, выберите вариант из меню.\n";
					choiceMainMenu = -1; 
					continue; // Продолжаем цикл для повторного выбора действия
				}
				break; // Выходим из цикла, если пользователь выбрал выход из программы
			}
		}
	} while (choiceMainMenu != 0); // Продолжаем цикл до тех пор, пока пользователь не выберет выход из программы

	db.~DataBase(); // Вызываем деструктор базы данных для закрытия соединения с базой данных
	std::cout << "Вы вышли из программы.\n"; // Выводим сообщение о выходе из программы
	return 0;
}
