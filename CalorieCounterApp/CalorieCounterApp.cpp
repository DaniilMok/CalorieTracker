#include <iostream>
#include "ProductInput.h"
#include "ProductDeleter.h"
#include "DataBase.h" // Указывает относительный путь к DataBase.h
#include <sstream>// Указывает относительный путь к sstream для работы со строками

using namespace std;

void showMenu() { // Функция для отображения меню
    setlocale(LC_ALL, "Russian");

	cout << "Калькулятор калорий\n";
    cout << "\n1 - Составить рацион\n";
    cout << "2 - Добавить продукт\n";
    cout << "3 - Показать все продукты\n";
    cout << "4 - Удалить продукт из базы\n";
    cout << "5 - Добавить активность\n";
    cout << "6 - Посмотреть все активности\n";
    cout << "7 - Удалить активность из базы\n";
    cout << "0 - Выход\n";
    cout << "Выбор: ";
}

Activities inputActivities() { // Функция для ввода данных об активности
	string name; // Название активности
	double calBurn; // Калории, сжигаемые за минуту

	cin.ignore(); // Игнорируем предыдущий ввод, чтобы избежать проблем с getline
    cout << "На 1 грамм\n"; 
	do
	{
		cout << "Название: "; getline(cin, name); // Считываем название активности
		if (name.empty()) { // Если пользователь ввел пустую строку
			cout << "Название не может быть пустым. Пожалуйста, введите название активности.\n"; // Выводим сообщение об ошибке
			continue; // Продолжаем цикл для повторного ввода
		}
		else
			break; // Выходим из цикла, если введено корректное название активности
	} while (true);
	do
	{
		cout << "Калорий сгорает: "; cin >> calBurn; // Считываем калории, сжигаемые за минуту
		if (cin.fail()) {  // Проверяем, не произошла ли ошибка при вводе
			cin.clear(); // Сбрасываем состояние потока  
			cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Очищаем ввод  
			cout << "Вы не ввели ничего или ввели иной символ. Пожалуйста, введите положительное значение калорий.\n"; // Выводим сообщение об ошибке
			continue; // Продолжаем цикл для повторного ввода
		}
		if (calBurn < 0) { // Если пользователь ввел отрицательное значение калорий
			cout << "Калории не могут быть отрицательными. Пожалуйста, введите положительное значение.\n"; // Выводим сообщение об ошибке
			continue; // Продолжаем цикл для повторного ввода
		}
		else
			break; // Выходим из цикла, если введено корректное значение калорий
	} while (true);

	return Activities(name, calBurn); // Возвращаем объект Activities с введенными данными
}

int main() { // Главная функция программы
	DataBase db("calories.db"); // Создаем объект базы данных с именем файла "calories.db"
	ProductDeleter deleter(db); //
	if (!db.createTableProducts()) return 1; // Создаем таблицу продуктов
	if (!db.createTableActivities()) return 1; // Создаем таблицу активностей

	int choice; // Переменная для выбора действия в меню
	do { // Цикл для отображения меню и обработки выбора пользователя
		do
		{
			showMenu(); // Отображаем меню
			cin >> choice; // Считываем выбор пользователя
			if (cin.fail()) {  // Проверяем, не произошла ли ошибка при вводе
				cin.clear(); // Сбрасываем состояние потока  
				cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Очищаем ввод  
				cout << "Вы не ввели ничего или ввели иной символ. Пожалуйста, выберите вариант из меню.\n";
				continue; // Продолжаем цикл для повторного ввода
			}
			else
				break; // Выходим из цикла, если введено корректное значение
		} while (true);

        switch (choice) { // Преобразуем строку в целое число для обработки выбора пользователя
			case 2: { // Добавление продукта
				ProductInput input;
				Product p = input.inputProduct();
				db.addProduct(p);
					break;
				}
			case 3: { // Показать все продукты
				auto list = db.getAllProducts(); // Получаем список всех продуктов из базы данных
				for (const auto& p : list) { // Перебираем все продукты в списке
					p.printProducts(); // Выводим информацию о каждом продукте
					}
					break;
				}
			case 4: { // Удаление продукта
				deleter.runDeleteUI();
				break;
			}

			case 5: {
				Activities a = inputActivities(); // Ввод данных об активности
				db.addActivities(a); // Добавляем активность в базу данных
                break;
            }
			default: {// Если пользователь ввел неверный вариант
				if (choice != 0) { // Если пользователь не выбрал выход из программы
					cout << "Неверный выбор. Пожалуйста, выберите вариант из меню.\n"; // Выводим сообщение об ошибке
					choice = -1; // Сбрасываем выбор пользователя
					continue; // Продолжаем цикл для повторного выбора действия
				}
				break; // Выходим из цикла, если пользователь выбрал выход из программы
			}
        }
	} while (choice != 0); // Продолжаем цикл до тех пор, пока пользователь не выберет выход из программы
	cout << "Выход из программы.\n"; // Выводим сообщение о выходе из программы

    return 0;
}
